#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Launch an EC2 HBase slaves.

if [ -z $1 ]; then
  echo "Cluster name required!"
  exit 1
fi

CLUSTER=$1

if [ -z $2 ]; then
  echo "Must specify the number of slaves to start."
  exit 1
fi

NO_INSTANCES=$2

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. "$bin"/hbase-ec2-env.sh

if [ ! -f $MASTER_IP_PATH ]; then
  echo "Must start Cluster Master first!"
  exit 1
fi

[ -z "$AMI_IMAGE" ] && AMI_IMAGE=`ec2-describe-images $TOOL_OPTS -a | grep -e $S3_BUCKET -e $S3_ACCOUNT | grep $HBASE_VERSION | grep $SLAVE_ARCH | grep available | awk '{print $2}'`

MASTER_HOST=`cat $MASTER_PRIVATE_IP_PATH`
MASTER_ZONE=`cat $MASTER_ZONE_PATH`
ZOOKEEPER_QUORUM=`cat $ZOOKEEPER_QUORUM_PATH`

# Substituting master hostname and zookeeper quorum
sed -e "s|%MASTER_HOST%|$MASTER_HOST|" \
    -e "s|%ZOOKEEPER_QUORUM%|$ZOOKEEPER_QUORUM|" \
    -e "s|%EXTRA_PACKAGES%|$EXTRA_PACKAGES|" \
    "$bin"/$USER_DATA_FILE > "$bin"/$USER_DATA_FILE.slave

# Start slaves
echo "Starting $NO_INSTANCES AMI(s) with ID $AMI_IMAGE (arch $SLAVE_ARCH) in group $CLUSTER in zone $MASTER_ZONE"
slaves=$(ec2-run-instances $AMI_IMAGE $TOOL_OPTS -n "$NO_INSTANCES" -g "$CLUSTER" -k root -f "$bin"/$USER_DATA_FILE.slave -t "$SLAVE_INSTANCE_TYPE" -z "$MASTER_ZONE" | grep INSTANCE | awk '{print $2}')
for shost in $slaves
do
  # get private dns
  echo -n "  $shost"
  while true; do
    printf "."
    # get private dns
	SLAVE_HOST=`ec2-describe-instances $TOOL_OPTS $shost | grep running | awk '{print $5}'`
	if [ ! -z $SLAVE_HOST ]; then
		echo -n " started as $SLAVE_HOST"
		break;
	fi
	sleep 1
  done

  SLAVE_EC2_HOST=`ec2-describe-instances $TOOL_OPTS $shost | grep INSTANCE | grep running | grep $SLAVE_HOST | awk '{print $4}'`
  echo ", public: $SLAVE_EC2_HOST"

  # make sure slave is ssh-able
  while true; do
	REPLY=`ssh $SSH_OPTS "root@$SLAVE_EC2_HOST" 'echo "hello"'`
	if [ ! -z $REPLY ]; then
	  break;
	fi
	sleep 5
  done
  scp $SSH_OPTS $EC2_ROOT_SSH_KEY "root@$SLAVE_EC2_HOST:/root/.ssh/id_rsa"
  ssh $SSH_OPTS "root@$SLAVE_EC2_HOST" "chmod 600 /root/.ssh/id_rsa"
done

rm "$bin"/$USER_DATA_FILE.slave
